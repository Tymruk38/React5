{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["timerID","formatTime","count","min","Math","floor","sec","Timer","time","step","onTick","autostart","React","useState","setCount","paused","setPaused","tik","prev","useEffect","setInterval","clearInterval","className","onClick","App","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2JAGIA,E,6DAEEC,EAAa,SAACC,GAClB,IAAIC,EAAMC,KAAKC,MAAOH,EAAQ,IAAO,IAAO,GACxCC,EAAM,KACRA,EAAM,IAAMA,GAGd,IAAIG,EAAMF,KAAKC,MAAOH,EAAQ,IAAQ,IAKtC,OAJII,EAAM,KACRA,EAAM,IAAMA,GAGNH,EAAM,IAAMG,GAGhBC,EAAQ,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,OAC3B,GADmD,EAAhBC,UACTC,IAAMC,SAASL,IAAzC,mBAAON,EAAP,KAAcY,EAAd,KACA,EAA4BF,IAAMC,UAAS,GAA3C,mBAAOE,EAAP,KAAeC,EAAf,KAEMC,EAAM,WACVH,GAAS,SAACI,GAAD,OAAUA,EAAOT,MAG5BG,IAAMO,WAAU,WAId,OAHAnB,EAAUoB,YAAYH,EAAKR,GAGpB,WACLY,cAAcrB,MAEf,IAEHY,IAAMO,WAAU,WAAQT,EAAOR,KAAU,CAACA,IAY1C,OACE,sBAAKoB,UAAY,QAAjB,UACE,8BAAMrB,EAAWC,KACjB,wBAAQqB,QAbS,WACfR,EACFf,EAAUoB,YAAYH,EAAKR,GAE3BY,cAAcrB,GAGhBgB,GAAWD,IAMT,SAAgCA,EAAS,QAAU,cAoB1CS,EAfH,WAEV,OACE,8BACE,cAAC,EAAD,CACEhB,KAAM,KACNC,KAAM,IACNC,OAAQ,SAACF,GAAD,OAAUiB,QAAQC,IAAI,0FAAsBlB,IACpDG,WAAW,OCpDJgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.a891c05e.chunk.js","sourcesContent":["import React from \"react\";\nimport './App.css'\n\nlet timerID;\n\nconst formatTime = (count) => {\n  let min = Math.floor((count / 1000 / 60) << 0);\n  if (min < 10) {\n    min = '0' + min;\n  };\n\n  let sec = Math.floor((count / 1000) % 60);\n  if (sec < 10) {\n    sec = '0' + sec;\n  };\n\n  return (min + ':' + sec);\n}\n\nconst Timer = ({ time, step, onTick, autostart }) => {\n  const [count, setCount] = React.useState(time);\n  const [paused, setPaused] = React.useState(false);\n\n  const tik = () => {\n    setCount((prev) => prev - step)\n  }\n\n  React.useEffect(() => {\n    timerID = setInterval(tik, step)\n\n\n    return () => {\n      clearInterval(timerID)\n    }\n  }, [])\n\n  React.useEffect(() => { onTick(count) }, [count])\n\n  const clickHandler = () => {\n    if (paused) {\n      timerID = setInterval(tik, step)\n    } else {\n      clearInterval(timerID)\n    }\n\n    setPaused(!paused)\n  }\n\n  return (\n    <div className = \"clook\">\n      <div>{formatTime(count)}</div>\n      <button onClick={clickHandler}>{paused ? 'Start' : 'Pause'}</button>\n    </div>\n  )\n}\n\nconst App = () => {\n\n  return (\n    <div>\n      <Timer\n        time={3600000}\n        step={1000}\n        onTick={(time) => console.log(\"Залишилось часу: \" + time)}\n        autostart={true}\n      />\n\n    </div>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}